NAME: CMAKE

ON:
  __PUSH:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  BUILD:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - use: actions/checkout@v3

    - name: Configure CMAKE
      # Configure CMAKE in a 'BUILD' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the configuration file
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}



  ENV:
  BUILD_TYPE: Release
 - name: __rc""

"RunWWW", null]},-1],["cr:",["_TimeSliceImpls"],{"__rc"

"_TimeSliceImpls", null]},-1],["cr:", [""],{"__rc"

"setTimeoutOrWWWMobile", null]},-1],["cr:4000",["PromiseImpls"],{"__rc"

"clearTimeoutOrWWWMobile", null]},-1],["cr:4443", [""],{"__rc"

"PromiseImpls", null]},-1],["cr:",[".__META_JSON"],{"__rc", "null",".__META_JSON"]},1],["cr:4002",[],{"__rc":[null,null]},1],["cr:",["_UnexpectedUseInComet"],
{"__rc","_UnexpectedUseInComet", null]},-1],["cr:",["PromiseMonitor"]

"PromiseMonitor", nullptr]}
